/*#include<iostream>
using namespace std;

int main() {
#ifndef ONLINE_JUDGE
	freopen("input1.txt", "r", stdin);
	freopen("output1.txt", "w", stdout);
#endif
	int n;
	cout << "enter n value" << endl;
	cin >> n;
	cout << n;
}*/

#include<iostream>
#include<cstring>
using namespace std;
#define n 9

bool isSafeInRow(int grid[n][n], int row, int num) {
	for (int i = 0; i < n; i++) {
		if (grid[row][i] == num) {
			return false;
		}
	}
	return true;
}

bool isSafeInCol(int grid[n][n], int col, int num) {
	for (int i = 0; i < n; i++) {
		if (grid[i][col] == num) {
			return false;
		}
	}
	return true;
}

bool isSafeInGrid(int grid[n][n], int row, int col, int num) {
	int rowFactor = row - (row % 3);
	int colFactor = col - (col % 3);
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			if (grid[i + rowFactor][j + colFactor] == num) {
				return false;
			}
		}
	}
	return true;
}

bool isSafe(int grid[n][n], int row, int col, int num) {
	if (isSafeInRow(grid, row, num) && isSafeInCol(grid, col, num)
	        && isSafeInGrid(grid, row, col, num)) {
		return true;
	}
	return false;
}

bool isZero(int grid[n][n], int &row, int &col) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (grid[i][j] == 0) {
				row = i;
				col = j;
				return true;
			}
		}
	}
	return false;
}

bool solveSuduko(int grid[n][n]) {
	int row , col ;
	if (!isZero(grid, row, col)) {
		return true;
	}
	for (int i = 1; i <= 9; i++) {
		if (isSafe(grid, row, col, i)) {
			grid[row][col] = i;
			if (solveSuduko(grid)) {
				return true;
			}
			grid[row][col] = 0;
		}
	}
	return false;
}


int main() {
#ifndef ONLINE_JUDGE
	freopen("input1.txt", "r", stdin);
	freopen("output1.txt", "w", stdout);
#endif
	int grid[n][n] = {0};
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n ; j++) {
			cin >> grid[i][j] ;
		}
	}
	solveSuduko(grid);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cout << grid[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl;
	return 0;
}
