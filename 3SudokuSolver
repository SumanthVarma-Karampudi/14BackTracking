#include <iostream>
#include <cstring>
using namespace std;
#define n 9

bool isSafeInRow(int grid[n][n], int row, int num) {
    for (int i = 0; i < n; i++) {
        if (grid[row][i] == num) {
            return false;
        }
    }
    return true;
}

bool isSafeInCol(int grid[n][n], int col, int num) {
    for (int i = 0; i < n; i++) {
        if (grid[i][col] == num) {
            return false;
        }
    }
    return true;
}

bool isSafeInGrid(int grid[n][n], int row, int col, int num) {
    int rowFactor = row - (row % 3);
    int colFactor = col - (col % 3);
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (grid[i + rowFactor][j + colFactor] == num) {
                return false;
            }
        }
    }
    return true;
}

bool isSafe(int grid[n][n], int row, int col, int num) {
    if (isSafeInRow(grid, row, num) && isSafeInCol(grid, col, num)
        && isSafeInGrid(grid, row, col, num)) {
        return true;
    }
    return false;
}

bool isZero(int grid[n][n], int &row, int &col) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == 0) {
                row = i;
                col = j;
                return true;
            }
        }
    }
    return false;
}

bool solveSudoku(int grid[n][n]) {
    int row, col;
    if (!isZero(grid, row, col)) {
        return true;
    }
    for (int num = 1; num <= 9; num++) {
        if (isSafe(grid, row, col, num)) {
            grid[row][col] = num;
            if (solveSudoku(grid)) {
                return true;
            }
            grid[row][col] = 0;
        }
    }
    return false;
}

int main() {
    int grid[n][n] = {0};
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> grid[i][j];
        }
    }
    if (solveSudoku(grid)) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cout << grid[i][j] << " ";
            }
            cout << endl;
        }
    } else {
        cout << "No solution exists." << endl;
    }
    return 0;
}
